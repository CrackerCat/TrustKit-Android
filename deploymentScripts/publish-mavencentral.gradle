apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    PUBLISH_GROUP_ID = 'com.datatheorem.android.trustkit'
    PUBLISH_VERSION = trustkitVersionName
    PUBLISH_ARTIFACT_ID = 'TrustKit-Android'
    DESCRIPTION = 'TrustKit Android is an open source library that makes it easy to deploy SSL public key pinning and reporting in any Android App.'
    LICENSE_NAME = 'The MIT License (MIT)'
    LICENSE_URL = 'https://github.com/datatheorem/TrustKit-Android/blob/master/LICENSE'
    PROPERTIES_FILE_NAME = 'local.properties'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

// Read attributes from the local.properties file
File secretPropsFile = project.rootProject.file(PROPERTIES_FILE_NAME)
Properties properties = new Properties()
new FileInputStream(secretPropsFile).withCloseable { is -> properties.load(is)}
properties.each { name, value -> ext[name] = value }


publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that we'll set up later
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            // Two artifacts, the `aar` (or `jar`) and the sources
            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact androidSourcesJar
            // Mostly self-explanatory metadata
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = DESCRIPTION
                url = 'https://github.com/datatheorem/TrustKit-Android'
                licenses {
                    license {
                        name = LICENSE_NAME
                        url = LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id = 'nabla-c0d3'
                        name = 'Alban Diquet'
                        email = 'ad@datatheorem.io'
                    }
                    developer {
                        id = 'jobot0'
                        name = 'Jordan Bouellat'
                        email = 'jb@datatheorem.com'
                    }
                }
                // Version control info
                scm {
                    connection = 'scm:git:github.com/datatheorem/TrustKit-Android.git'
                    developerConnection = 'scm:git:ssh://github.com/datatheorem/TrustKit-Android.git'
                    url = 'https://github.com/datatheorem/TrustKit-Android/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    // The repository to publish to, Sonatype/MavenCentral
    repositories {
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or any other name that's descriptive for you
            name = "sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}